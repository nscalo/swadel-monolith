#
# Usage
#     FILTER_SOURCES()
#
# Filters HEADER_FILES_1, EXPORT_HEADER_FILES_1 and SOURCE_FILES_1 variables to remove Win or Linux files
# Creates HEADER_FILES, EXPORT_HEADER_FILES and SOURCE_FILES variables
#
macro( FILTER_SOURCES FILER_OUT_REGEXP )
      if (WIN32)
            foreach(FILE ${HEADER_FILES_TMP})
                if ( NOT FILE MATCHES _linux AND NOT FILE MATCHES ${FILER_OUT_REGEXP})
                        list(APPEND HEADER_FILES_TMP_2 ${FILE})
                endif ( NOT FILE MATCHES _linux AND NOT FILE MATCHES ${FILER_OUT_REGEXP})
            endforeach(FILE)

            foreach(FILE ${SOURCE_FILES_TMP})
                if ( NOT FILE MATCHES  ^stdafx[.]c.*$|_linux  AND NOT FILE MATCHES ${FILER_OUT_REGEXP})
                        list(APPEND SOURCE_FILES_TMP_2 ${FILE})
                endif ( NOT FILE MATCHES  ^stdafx[.]c.*$|_linux  AND NOT FILE MATCHES ${FILER_OUT_REGEXP})
            endforeach(FILE)

            list(APPEND SOURCE_FILES_TMP_2 ${RECOURCE_FILES_1})

        else () # Linux

            foreach(FILE ${HEADER_FILES_TMP})
                if ( NOT FILE MATCHES ^resource[.]h$|^stdafx[.]h$|_windows|_win32 AND NOT FILE MATCHES ${FILER_OUT_REGEXP})
                        list(APPEND HEADER_FILES_TMP_2 ${FILE})
                endif ( NOT FILE MATCHES ^resource[.]h$|^stdafx[.]h$|_windows|_win32 AND NOT FILE MATCHES ${FILER_OUT_REGEXP})
            endforeach(FILE)

            foreach(FILE ${SOURCE_FILES_TMP})
                if ( NOT FILE MATCHES ^stdafx[.]c.*$|_windows|_win32 AND NOT FILE MATCHES ${FILER_OUT_REGEXP})
                        list(APPEND SOURCE_FILES_TMP_2 ${FILE})
                endif ( NOT FILE MATCHES ^stdafx[.]c.*$|_windows|_win32 AND NOT FILE MATCHES ${FILER_OUT_REGEXP})
            endforeach(FILE)

      endif (WIN32)

      if (DEFINED HEADER_FILES_TMP_2)
          set (HEADER_FILES ${HEADER_FILES_TMP_2} PARENT_SCOPE)
      endif (DEFINED HEADER_FILES_TMP_2)

      if (DEFINED SOURCE_FILES_TMP_2)
          set (SOURCE_FILES ${SOURCE_FILES_TMP_2} PARENT_SCOPE)
      endif (DEFINED SOURCE_FILES_TMP_2)

endmacro( FILTER_SOURCES )

function ( FIND_SOURCES )
    file( GLOB HEADER_FILES_TMP RELATIVE ${CMAKE_SOURCE_DIR} *.h )
    file( GLOB SOURCE_FILES_TMP RELATIVE ${CMAKE_SOURCE_DIR} *.cpp )

	
	if (${ARGC} EQUAL 0 )
        set( FILER_OUT_REGEXP "not used regexp" )
    else()
        set( FILER_OUT_REGEXP ${ARGV0} )
    endif (${ARGC} EQUAL  0 )

    # FILTER_SOURCES( ${FILER_OUT_REGEXP} )

endfunction ( FIND_SOURCES )

function ( FIND_COMMON_SOURCES )
    file( GLOB SOURCE_FILES_TMP RELATIVE ${TBB_SOURCE_DIR} *.cpp )
    file( GLOB SOURCE_FILES_TMP RELATIVE ${TBB_MALLOC_DIR} *.cpp )
	
	if (${ARGC} EQUAL 0 )
        set( FILER_OUT_REGEXP "not used regexp" )
    else()
        set( FILER_OUT_REGEXP ${ARGV0} )
    endif (${ARGC} EQUAL  0 )

    # FILTER_SOURCES( ${FILER_OUT_REGEXP} )
    
endfunction ( FIND_COMMON_SOURCES )